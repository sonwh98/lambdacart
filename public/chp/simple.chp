(require '[datomic.api :as d]
         '[datomic.db])

(def datomic-user (System/getenv "DATOMIC_USER"))
(def datomic-password (System/getenv "DATOMIC_PASSWORD"))

(def db-uri
  (format "datomic:sql://lambdacart?jdbc:postgresql://localhost:5432/datomic?user=%s&password=%s"
          datomic-user datomic-password))
(def conn (d/connect db-uri))
(def db (d/db conn))

[:html {:lang "en"}
 [:head
  [:meta {:charset "UTF-8"}]
  [:meta {:name "viewport" :content "width=device-width, initial-scale=1.0"}]
  [:title "Tour Search"]
  [:link {:rel "stylesheet" :href "/css/style.css"}]
  [:script {:src "/js/tourism.js"}]]
 [:body
  [:div.header-container
   [:div.search-container
    [:input.search-box {:type "text" :placeholder "Search tours..."}]]
   [:button.menu-toggle {:onclick "lambdacart.tourism.toggleMenu()"}
    [:span.hamburger]]
   [:nav.navigation
    [:div.tab-bar
     [:button.tab {:class "active"} "Promotions"]
     [:button.tab "Tours"]
     [:button.tab "Hotels"]
     [:button.tab "Transportation"]]]]

  [:div.card-grid
   (let [tours (d/q '[:find [(pull ?e [* {:item/images [*]}]) ...] 
                      :where [?e :item/name _]]
                    db)]
     (for [t tours]
       [:div.card
        [:img {:src (-> t :item/images first :image/url)}]
        [:div.card-content
         [:h3 (:item/name t)]
         [:p (:item/description t)]]]))]]]
